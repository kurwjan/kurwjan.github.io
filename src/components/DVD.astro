<div id="container" class="bg-black h-[80vh] relative -z-2 mx-4 rounded-xl">
</div>

<script>
    // CREDITS:
    // https://github.com/bemxio/dvd-screensaver
    // Licensed under the MIT License

    // helper functions
    function randint(min: number, max: number): number {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function move(image: SVGSVGElement, x: number, y: number): void {
        image.style.left = `${x}px`;
        image.style.top = `${y}px`;
    }

    function getDimensions(image: SVGSVGElement): [number, number] {
        // get the dimensions from the width and height attributes
        let width = image.getAttribute("width");
        let height = image.getAttribute("height");

        if (width != null && height != null) {
            return [parseInt(width), parseInt(height)];
        }

        // get the dimensions from the viewbox if the width and height are not set
        let viewbox = image.getAttribute("viewBox");

        if (viewbox == null) {
            return [300, 150]; // default dimensions for SVG
        }

        const viewboxValues = viewbox.split(" ");
        width = viewboxValues[2];
        height = viewboxValues[3];

        return [parseInt(width), parseInt(height)];
    }

    function changeDirection(index: number, value: number): void {
        direction[index] = value;

        // check if color randomization is enabled and if the direction changed
        if (randomizeColor) {
            logo.style.fill = `rgb(${randint(0, 255)}, ${randint(0, 255)}, ${randint(0, 255)})`;
        }
    }

    function getLogoURL(): string {
        // return the default logo if the parameter is not set
        if (!params.has("logo")) {
            return "/logos/default.svg";
        }

        return params.get("logo") || "/logos/default.svg";
    }

    function getLogo(url: string): SVGSVGElement {
        // get the SVG logo from the URL
        const request = new XMLHttpRequest();
        const parser = new DOMParser();

        request.open("GET", url, false);
        request.send(null);

        // if the request failed, return the default logo
        if (request.status != 200) {
            return getLogo("/logos/default.svg");
        }

        const imageDoc = parser.parseFromString(
            request.responseText,
            "text/html",
        );

        // if the image is not an SVG, return the default logo
        if (imageDoc.querySelector("parsererror")) {
            return getLogo("/logos/default.svg");
        }

        let image = imageDoc.querySelector("svg");

        // if the image is null, return the default logo
        if (image == null) {
            return getLogo("/logos/default.svg");
        }

        // filter any color attributes from the SVG
        for (const attribute of ["fill", "style"]) {
            for (const element of image.querySelectorAll(`[${attribute}]`)) {
                element.removeAttribute(attribute);
            }
        }

        return image as SVGSVGElement;
    }

    // constants
    const params = new URLSearchParams(window.location.search);

    const logo = getLogo(getLogoURL());
    const dimensions = getDimensions(logo);

    const initialColor = params.get("initialColor") || "white";
    let randomizeColor = true;

    // don't randomize the color if the parameter is set to false
    if (
        params.has("randomizeColor") &&
        ["false", "0"].includes(params.get("randomizeColor") || "")
    ) {
        randomizeColor = false;
    }

    const speed = 2.0;

    // get parent container element
    let container = document.getElementById("container");

    // variables
    let x = randint(1, container!.clientWidth - dimensions[0] - 1);
    let y = randint(1, container!.clientHeight - dimensions[1] - 1);

    let direction: [number, number] = [1, 1];

    // set id and fill color to the logo
    logo.style.fill = initialColor;
    logo.id = "logo";
    logo.style.position = "absolute";
    logo.style.zIndex = "-1";

    // add the logo to the page
    container!.append(logo);

    // move the logo to the randomized initial position
    move(logo, x, y);

    // main loop
    setInterval(() => {
        // change the coords based on the direction & speed
        x += speed * direction[0];
        y += speed * direction[1];

        // check if logo is bouncing on the left/right side
        if (x <= 1) {
            changeDirection(0, 1);
        } else if (x + dimensions[0] + 1 >= container!.clientWidth) {
            changeDirection(0, -1);
        }

        // check if logo is bouncing on the top/bottom side
        if (y <= 1) {
            changeDirection(1, 1);
        } else if (y + dimensions[1] + 1 >= container!.clientHeight) {
            changeDirection(1, -1);
        }

        // move the logo to the current X and Y coords
        move(logo, x, y);
    }, 16);
</script>
